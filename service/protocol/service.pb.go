// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	C2SLogin
	S2CLogin
	C2STokenLogin
	S2CTokenLogin
	Con2SMRegister
	SM2ConRegisterResult
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 登录结果
type LoginResult int32

const (
	LoginResult_Success       LoginResult = 0
	LoginResult_UserNameError LoginResult = -1
	LoginResult_PasswordError LoginResult = -2
	LoginResult_TokenError    LoginResult = -3
	LoginResult_UnknownError  LoginResult = -4
)

var LoginResult_name = map[int32]string{
	0:  "Success",
	-1: "UserNameError",
	-2: "PasswordError",
	-3: "TokenError",
	-4: "UnknownError",
}
var LoginResult_value = map[string]int32{
	"Success":       0,
	"UserNameError": -1,
	"PasswordError": -2,
	"TokenError":    -3,
	"UnknownError":  -4,
}

func (x LoginResult) String() string {
	return proto.EnumName(LoginResult_name, int32(x))
}
func (LoginResult) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type C2SLogin_MsgID int32

const (
	C2SLogin_Zero C2SLogin_MsgID = 0
	C2SLogin_ID   C2SLogin_MsgID = 1
)

var C2SLogin_MsgID_name = map[int32]string{
	0: "Zero",
	1: "ID",
}
var C2SLogin_MsgID_value = map[string]int32{
	"Zero": 0,
	"ID":   1,
}

func (x C2SLogin_MsgID) String() string {
	return proto.EnumName(C2SLogin_MsgID_name, int32(x))
}
func (C2SLogin_MsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type S2CLogin_MsgID int32

const (
	S2CLogin_Zero S2CLogin_MsgID = 0
	S2CLogin_ID   S2CLogin_MsgID = 2
)

var S2CLogin_MsgID_name = map[int32]string{
	0: "Zero",
	2: "ID",
}
var S2CLogin_MsgID_value = map[string]int32{
	"Zero": 0,
	"ID":   2,
}

func (x S2CLogin_MsgID) String() string {
	return proto.EnumName(S2CLogin_MsgID_name, int32(x))
}
func (S2CLogin_MsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type C2STokenLogin_MsgID int32

const (
	C2STokenLogin_Zero C2STokenLogin_MsgID = 0
	C2STokenLogin_ID   C2STokenLogin_MsgID = 3
)

var C2STokenLogin_MsgID_name = map[int32]string{
	0: "Zero",
	3: "ID",
}
var C2STokenLogin_MsgID_value = map[string]int32{
	"Zero": 0,
	"ID":   3,
}

func (x C2STokenLogin_MsgID) String() string {
	return proto.EnumName(C2STokenLogin_MsgID_name, int32(x))
}
func (C2STokenLogin_MsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type S2CTokenLogin_MsgID int32

const (
	S2CTokenLogin_Zero S2CTokenLogin_MsgID = 0
	S2CTokenLogin_ID   S2CTokenLogin_MsgID = 4
)

var S2CTokenLogin_MsgID_name = map[int32]string{
	0: "Zero",
	4: "ID",
}
var S2CTokenLogin_MsgID_value = map[string]int32{
	"Zero": 0,
	"ID":   4,
}

func (x S2CTokenLogin_MsgID) String() string {
	return proto.EnumName(S2CTokenLogin_MsgID_name, int32(x))
}
func (S2CTokenLogin_MsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Con2SMRegister_MsgID int32

const (
	Con2SMRegister_Zero Con2SMRegister_MsgID = 0
	Con2SMRegister_ID   Con2SMRegister_MsgID = 5
)

var Con2SMRegister_MsgID_name = map[int32]string{
	0: "Zero",
	5: "ID",
}
var Con2SMRegister_MsgID_value = map[string]int32{
	"Zero": 0,
	"ID":   5,
}

func (x Con2SMRegister_MsgID) String() string {
	return proto.EnumName(Con2SMRegister_MsgID_name, int32(x))
}
func (Con2SMRegister_MsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type SM2ConRegisterResult_MsgID int32

const (
	SM2ConRegisterResult_Zero SM2ConRegisterResult_MsgID = 0
	SM2ConRegisterResult_ID   SM2ConRegisterResult_MsgID = 6
)

var SM2ConRegisterResult_MsgID_name = map[int32]string{
	0: "Zero",
	6: "ID",
}
var SM2ConRegisterResult_MsgID_value = map[string]int32{
	"Zero": 0,
	"ID":   6,
}

func (x SM2ConRegisterResult_MsgID) String() string {
	return proto.EnumName(SM2ConRegisterResult_MsgID_name, int32(x))
}
func (SM2ConRegisterResult_MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

// 登陆消息，客户端发送给登录服务器
type C2SLogin struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *C2SLogin) Reset()                    { *m = C2SLogin{} }
func (m *C2SLogin) String() string            { return proto.CompactTextString(m) }
func (*C2SLogin) ProtoMessage()               {}
func (*C2SLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *C2SLogin) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *C2SLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// 登录结果消息，服务器发送给客户端
type S2CLogin struct {
	Result           LoginResult `protobuf:"varint,1,opt,name=result,enum=protocol.LoginResult" json:"result,omitempty"`
	Userid           int64       `protobuf:"varint,2,opt,name=userid" json:"userid,omitempty"`
	Token            string      `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	ConnectionServer string      `protobuf:"bytes,4,opt,name=connectionServer" json:"connectionServer,omitempty"`
}

func (m *S2CLogin) Reset()                    { *m = S2CLogin{} }
func (m *S2CLogin) String() string            { return proto.CompactTextString(m) }
func (*S2CLogin) ProtoMessage()               {}
func (*S2CLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *S2CLogin) GetResult() LoginResult {
	if m != nil {
		return m.Result
	}
	return LoginResult_Success
}

func (m *S2CLogin) GetUserid() int64 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *S2CLogin) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *S2CLogin) GetConnectionServer() string {
	if m != nil {
		return m.ConnectionServer
	}
	return ""
}

// token登录
type C2STokenLogin struct {
	Userid int64  `protobuf:"varint,1,opt,name=userid" json:"userid,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *C2STokenLogin) Reset()                    { *m = C2STokenLogin{} }
func (m *C2STokenLogin) String() string            { return proto.CompactTextString(m) }
func (*C2STokenLogin) ProtoMessage()               {}
func (*C2STokenLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *C2STokenLogin) GetUserid() int64 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *C2STokenLogin) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// token登陆结果
type S2CTokenLogin struct {
	Resut LoginResult `protobuf:"varint,1,opt,name=resut,enum=protocol.LoginResult" json:"resut,omitempty"`
}

func (m *S2CTokenLogin) Reset()                    { *m = S2CTokenLogin{} }
func (m *S2CTokenLogin) String() string            { return proto.CompactTextString(m) }
func (*S2CTokenLogin) ProtoMessage()               {}
func (*S2CTokenLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *S2CTokenLogin) GetResut() LoginResult {
	if m != nil {
		return m.Resut
	}
	return LoginResult_Success
}

// connection到service manger注册的消息
type Con2SMRegister struct {
	PublicIP string `protobuf:"bytes,1,opt,name=publicIP" json:"publicIP,omitempty"`
}

func (m *Con2SMRegister) Reset()                    { *m = Con2SMRegister{} }
func (m *Con2SMRegister) String() string            { return proto.CompactTextString(m) }
func (*Con2SMRegister) ProtoMessage()               {}
func (*Con2SMRegister) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Con2SMRegister) GetPublicIP() string {
	if m != nil {
		return m.PublicIP
	}
	return ""
}

// server manger 返回注册结果
type SM2ConRegisterResult struct {
	Serverindex int32 `protobuf:"varint,1,opt,name=serverindex" json:"serverindex,omitempty"`
	Result      int32 `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
}

func (m *SM2ConRegisterResult) Reset()                    { *m = SM2ConRegisterResult{} }
func (m *SM2ConRegisterResult) String() string            { return proto.CompactTextString(m) }
func (*SM2ConRegisterResult) ProtoMessage()               {}
func (*SM2ConRegisterResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SM2ConRegisterResult) GetServerindex() int32 {
	if m != nil {
		return m.Serverindex
	}
	return 0
}

func (m *SM2ConRegisterResult) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*C2SLogin)(nil), "protocol.C2SLogin")
	proto.RegisterType((*S2CLogin)(nil), "protocol.S2CLogin")
	proto.RegisterType((*C2STokenLogin)(nil), "protocol.C2STokenLogin")
	proto.RegisterType((*S2CTokenLogin)(nil), "protocol.S2CTokenLogin")
	proto.RegisterType((*Con2SMRegister)(nil), "protocol.Con2SMRegister")
	proto.RegisterType((*SM2ConRegisterResult)(nil), "protocol.SM2ConRegisterResult")
	proto.RegisterEnum("protocol.LoginResult", LoginResult_name, LoginResult_value)
	proto.RegisterEnum("protocol.C2SLogin_MsgID", C2SLogin_MsgID_name, C2SLogin_MsgID_value)
	proto.RegisterEnum("protocol.S2CLogin_MsgID", S2CLogin_MsgID_name, S2CLogin_MsgID_value)
	proto.RegisterEnum("protocol.C2STokenLogin_MsgID", C2STokenLogin_MsgID_name, C2STokenLogin_MsgID_value)
	proto.RegisterEnum("protocol.S2CTokenLogin_MsgID", S2CTokenLogin_MsgID_name, S2CTokenLogin_MsgID_value)
	proto.RegisterEnum("protocol.Con2SMRegister_MsgID", Con2SMRegister_MsgID_name, Con2SMRegister_MsgID_value)
	proto.RegisterEnum("protocol.SM2ConRegisterResult_MsgID", SM2ConRegisterResult_MsgID_name, SM2ConRegisterResult_MsgID_value)
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x92, 0xdf, 0x8a, 0xda, 0x40,
	0x14, 0xc6, 0x4d, 0x34, 0x69, 0x7a, 0x6c, 0x24, 0x0c, 0xb6, 0x8d, 0x5e, 0x49, 0xae, 0x8a, 0xa5,
	0x5e, 0xa4, 0x8f, 0x10, 0x4b, 0x11, 0x6a, 0x91, 0x4c, 0xa5, 0xa5, 0xd0, 0x0b, 0x8d, 0x07, 0x09,
	0xea, 0x8c, 0xcc, 0x24, 0xda, 0x27, 0xd8, 0xc7, 0xd9, 0x27, 0xdc, 0x7f, 0x64, 0x26, 0xd1, 0xc0,
	0x6e, 0xd8, 0xdc, 0x84, 0x6f, 0x7e, 0x87, 0xef, 0x7c, 0x73, 0xce, 0x80, 0x2b, 0x51, 0x9c, 0xd2,
	0x04, 0x27, 0x47, 0xc1, 0x33, 0x4e, 0x1c, 0xf5, 0x4b, 0xf8, 0x3e, 0xf8, 0x07, 0x4e, 0x14, 0xd2,
	0x1f, 0x7c, 0x9b, 0x32, 0x32, 0x04, 0x27, 0x97, 0x28, 0xd8, 0xea, 0x80, 0xbe, 0x31, 0x32, 0x3e,
	0xbd, 0x8d, 0x2f, 0xba, 0x60, 0xc7, 0x95, 0x94, 0x67, 0x2e, 0x36, 0xbe, 0xa9, 0x59, 0xa5, 0x83,
	0x01, 0x58, 0x73, 0xb9, 0x9d, 0x4d, 0x89, 0x03, 0x9d, 0xbf, 0x28, 0xb8, 0xd7, 0x22, 0x36, 0x98,
	0xb3, 0xa9, 0x67, 0x04, 0xb7, 0x06, 0x38, 0x34, 0x8c, 0xb4, 0xff, 0x17, 0xb0, 0x05, 0xca, 0x7c,
	0x9f, 0x29, 0xf7, 0x5e, 0xf8, 0x7e, 0x52, 0xc5, 0x98, 0xa8, 0x82, 0x58, 0xc1, 0xb8, 0x2c, 0x22,
	0x1f, 0xc0, 0x2e, 0xda, 0xa7, 0xba, 0x61, 0x3b, 0x2e, 0x15, 0xe9, 0x83, 0x95, 0xf1, 0x1d, 0x32,
	0xbf, 0xad, 0x72, 0x68, 0x41, 0xc6, 0xe0, 0x25, 0x9c, 0x31, 0x4c, 0xb2, 0x94, 0x33, 0x8a, 0xe2,
	0x84, 0xc2, 0xef, 0xa8, 0x82, 0x67, 0xe7, 0xcd, 0x81, 0xcd, 0xe0, 0x0f, 0xb8, 0x51, 0x48, 0x7f,
	0x15, 0x96, 0x3a, 0xf4, 0x35, 0x85, 0xf1, 0x72, 0x0a, 0xb3, 0x96, 0xa2, 0xd9, 0xb9, 0x1d, 0xfc,
	0x06, 0x97, 0x86, 0x51, 0xcd, 0xf9, 0x33, 0x58, 0xc5, 0x4d, 0x5f, 0x99, 0x86, 0xae, 0x69, 0x36,
	0xee, 0x04, 0xdf, 0xa1, 0x17, 0x71, 0x16, 0xd2, 0x79, 0x8c, 0xdb, 0x54, 0x66, 0x28, 0xd4, 0xb2,
	0xf2, 0xf5, 0x3e, 0x4d, 0x66, 0x8b, 0x6a, 0x91, 0x95, 0x6e, 0x36, 0xb2, 0x82, 0x1d, 0xf4, 0xe9,
	0x3c, 0x8c, 0x38, 0xab, 0x8c, 0x74, 0x04, 0x32, 0x82, 0xae, 0x54, 0x83, 0x4b, 0xd9, 0x06, 0xff,
	0x2b, 0x47, 0x2b, 0xae, 0x1f, 0x15, 0x43, 0x2a, 0x37, 0x6b, 0x2a, 0x58, 0xaa, 0xe6, 0x66, 0xf6,
	0xf8, 0xc6, 0x80, 0x6e, 0xed, 0x9e, 0xa4, 0x0b, 0x6f, 0x68, 0x9e, 0x24, 0x28, 0xa5, 0xd7, 0x22,
	0x43, 0x70, 0x97, 0x12, 0xc5, 0xcf, 0xd5, 0x01, 0xbf, 0x09, 0xc1, 0x85, 0xf7, 0x58, 0x7d, 0x46,
	0xc1, 0x16, 0xe5, 0xcb, 0xd3, 0xec, 0xe1, 0xca, 0x3e, 0x02, 0xa8, 0x01, 0x6b, 0x70, 0x7f, 0x05,
	0x03, 0x78, 0xb7, 0x64, 0x3b, 0xc6, 0xcf, 0x25, 0xba, 0xbb, 0xa0, 0xb5, 0xad, 0xc6, 0xfe, 0xf5,
	0x29, 0x00, 0x00, 0xff, 0xff, 0x41, 0xf8, 0x8f, 0xf5, 0x23, 0x03, 0x00, 0x00,
}
